import { ApiPromise } from "@polkadot/api";
import { Keyring } from "@polkadot/keyring";
import { KeyringPair } from "@polkadot/keyring/types";
import "@polkadot/api-augment";
import { PolkadotApi } from "../types/interfaces/polkadot_api";
import { NetworkType } from "../types/interfaces/network";
import { SubmittableExtrinsic } from "@polkadot/api/types";
import { ISubmittableResult } from "@polkadot/types/types";

export default class PolkadotChain extends PolkadotApi {
  _mnemonic: string;
  _account: KeyringPair;

  constructor(mnemonic: string, network: NetworkType) {
    super(network);

    this._mnemonic = mnemonic;
    // Constuct the keyring after the API
    // const keyring = new Keyring({ type: "sr25519" });
    const keyring = new Keyring();  // default { type: 'ed25519' }

    // User Account
    this._account = keyring.addFromMnemonic(this._mnemonic);
    console.log("Address : ", this._account.address);
  }

  async getBalance(api: ApiPromise) {
    let balance = (
      await api.derive.balances.all(this._account.address)
    ).availableBalance.toNumber();
    balance = balance / Math.pow(10, 12);
    console.log(balance);
    return balance;
  }

  // Create transaction based on user inputs
  async createTransaction(toAddress: string, amount: number, api: ApiPromise) {
    const toAmount = amount * Math.pow(10, 12);
    // console.log('To Amount : ' , toAmount);

    // Create transaction
    const rawtxDetails = api.tx.balances.transfer(toAddress, toAmount);

    return rawtxDetails;
  }

  // Calculate gasFee generated by transaction
  async getGasFee(
    txDetails: SubmittableExtrinsic<"promise", ISubmittableResult>
  ) {
    // Gas fee generated by default during 'createTransaction'
    const paymentInfo = await txDetails.paymentInfo(this._account.address);
    let gasFee = paymentInfo.partialFee.toNumber() / Math.pow(10, 12);
    console.log("Fees : ", gasFee);
    return {
      slow: {
        fee: gasFee,
      },
      average: {
        fee: gasFee,
      },
      fast: {
        fee: gasFee,
      },
    };
  }

  // Sign and Send the transaction
  async signAndSend(
    rawtxDetails: SubmittableExtrinsic<"promise", ISubmittableResult>,
    api: ApiPromise
  ) {
    const { nonce: nonce } = await api.query.system.account(
      this._account.address
    );
    // console.log('Nonce : ', nonce);

    // Add signature for transaction
    const signer = api.createType(
      "SignerPayload",
      {
        method: rawtxDetails,
        nonce: nonce.toHex(),
        runtimeVersion: api.runtimeVersion,
        genesisHash: api.genesisHash,
        blockHash: api.genesisHash,
      },
      { version: api.extrinsicVersion }
    );
    // console.log('Signer : ', signer);

    const { signature } = api
      .createType("ExtrinsicPayload", signer.toPayload(), {
        version: api.extrinsicVersion,
      })
      .sign(this._account);
    // console.log('Signature is : ', signature);

    rawtxDetails.addSignature(
      this._account.address,
      signature,
      signer.toPayload()
    );

    try {
      const transactionDetails = await rawtxDetails.send();
      // console.log('Transaction details : ', transactionDetails);
      return transactionDetails.toString();
    } catch (error) {
      console.log("Error : " + error);
    }
  }

  getTransactionDetails(txId: string, api: ApiPromise) {
    
  }

  // async createTransactionAndSend(toAddress: string, amount: number, api: ApiPromise) {
  //   const toAmount = amount * Math.pow(10, 12);
  //   // console.log('To Amount : ' , toAmount);
  //   const { nonce: nonce } = await api.query.system.account(this._account.address);
  //   // console.log('Nonce : ', nonce);

  //   // Create transaction
  //   const transferDetails = api.tx.balances.transfer(toAddress, toAmount);
  //   const paymentInfo = await transferDetails.paymentInfo(this._account.address);
  //   let fees = paymentInfo.partialFee.toNumber();
  //   fees = fees / (Math.pow(10, 12));
  //   console.log('Fees : ', fees);
  //   // Add signature for transaction
  //   const signer = api.createType('SignerPayload', {
  //     method: transferDetails,
  //     nonce: nonce.toHex(),
  //     runtimeVersion: api.runtimeVersion,
  //     genesisHash: api.genesisHash,
  //     blockHash: api.genesisHash
  //   }, { version: api.extrinsicVersion });
  //   // console.log('Signer : ', signer);

  //   const { signature } = api.createType('ExtrinsicPayload', signer.toPayload(), { version: api.extrinsicVersion }).sign(this._account);
  //   // console.log('Signature is : ', signature);

  //   transferDetails.addSignature(this._account.address, signature, signer.toPayload());

  //   try {
  //     const transactionDetails = await transferDetails.send();
  //     // console.log('Transaction details : ', transactionDetails);
  //     return transactionDetails;
  //   } catch (error) {
  //     console.log('Error : ' + error);
  //   }
  // }
}
