// import Arweave from "arweave";
import { getKeyFromMnemonic } from "arweave-mnemonic-keys";
import { NetworkType } from "../types/interfaces/network";
// import ArweaveInitialise from "../types/interfaces/arweave_initialise";
import ArweaveAccount from "../accounts/arweave_account";
import Transaction from "arweave/node/lib/transaction";
import CoinGecko from "../assets_stats/coinGecko/assets_data";
import { GasfeeResult } from "./utils";

export default class ArweaveChain extends ArweaveAccount {
  _mnemonic: string;
  constructor(mnemonic: string, network: NetworkType) {
    super(network);
    this._mnemonic = mnemonic;
  }

  async getBalance(pubAddress: string): Promise<number> {
    // const pvtKey = await getKeyFromMnemonic(this._mnemonic);
    // console.log('Pvt key is : ' + pvtKey);
    // const pubAddress = await this._arweave.wallets.jwkToAddress(pvtKey);
    // console.log('Pub Address is : ' + pubAddress);

    // Get balance
    let wnstBalance = await this._arweave.wallets.getBalance(pubAddress);
    // console.log("Winston balance is : " + wnstBalance);

    // Convert balance from Winston to Ar. (1 Ar = 10^12)
    const arBalance = this._arweave.ar.winstonToAr(wnstBalance);
    // console.log("Ar balance is : " + arBalance);

    return Number(arBalance);
  }

  // Create transaction based on user inputs
  async createTransaction(
    toAddress: string,
    amount: number
  ): Promise<Transaction> {
    const pvtKey = await getKeyFromMnemonic(this._mnemonic);
    // const pubAddress = await this._arweave.wallets.jwkToAddress(pvtKey);
    // console.log('Pub Address is : ' + pubAddress);

    // Create transaction
    const rawTx = await this._arweave.createTransaction(
      {
        target: toAddress, // Receiver address
        quantity: this._arweave.ar.arToWinston(amount.toString()), // Amount to transfer in Ar
      },
      pvtKey
    );

    return rawTx;
  }

  // Calculate gasFee required for transaction
  async getGasFee(rawTx: Transaction): Promise<GasfeeResult> {
    // Gas fee generated by default during 'createTransaction'
    // const gasFee = rawTx.reward;
    // return {
    //   slow: {
    //     fee: gasFee,
    //   },
    //   average: {
    //     fee: gasFee,
    //   },
    //   fast: {
    //     fee: gasFee,
    //   },
    // };
    const arw_gasFee = Number(rawTx.reward);
    const pricesInst = new CoinGecko();
    const pricesData = await pricesInst.getAssestsCurrentMarketData({
      assets: "arweave",
    });
    if (pricesData !== undefined) {
      const usdt_gasFee = arw_gasFee * pricesData.current_price;
      const resultFee = {
        fee: {
          asset_fee: arw_gasFee,
          usdt_fee: usdt_gasFee,
        },
      };
      return {
        slow: resultFee,
        average: resultFee,
        fast: resultFee,
      };
    } else {
      throw new Error("Unable to retrieve current asset-usdt price");
    }
  }

  // Sign and Send the transaction
  async signAndSend(rawTx: Transaction) {
    const pvtKey = await getKeyFromMnemonic(this._mnemonic);
    // const pubAddress = await this._arweave.wallets.jwkToAddress(pvtKey);

    // Sign transaction and retreive status
    await this._arweave.transactions.sign(rawTx, pvtKey);
    const status = await this._arweave.transactions.post(rawTx);
    await this._arweave.api.get("/mine");
    // console.log("transfer status", status);

    if (status.status == 200) {
      // console.log('Transaction Hash / Id is : ' + transaction.id);
      // Get status data using transaction hash / id
      // const statusData = await this._arweave.transactions.getStatus(rawTx.id);

      // console.log(JSON.stringify(statusData));

      return rawTx.id;
    } else {
      console.log(
        "Error in status: Posting the transaction into arweave transactions"
      );
    }
  }

  // async createTransactionAndSend(toAddress: string, amount: number, arweave: Arweave) {
  //     const pvtKey = await getKeyFromMnemonic(this._mnemonic);
  //     // const pubAddress = await this._arweave.wallets.jwkToAddress(pvtKey);
  //     // console.log('Pub Address is : ' + pubAddress);

  //     // Create transaction
  //     const transaction = await arweave.createTransaction({
  //         target: toAddress,                              // Receiver address
  //         quantity: arweave.ar.arToWinston(amount.toString())  // Amount to transfer in Ar
  //     }, pvtKey);

  //     console.log("Reward amount", transaction.reward);

  //     // Sign transaction and retreive status
  //     await arweave.transactions.sign(transaction, pvtKey)
  //     const status = await arweave.transactions.post(transaction)
  //     await arweave.api.get("/mine")
  //     // console.log("transfer status", status);

  //     if (status.status == 200) {
  //         // console.log('Transaction Hash / Id is : ' + transaction.id);
  //         // Get status data using transaction hash / id
  //         const statusData = await arweave.transactions.getStatus(transaction.id);

  //         // console.log(JSON.stringify(statusData));

  //         return {
  //             transaction,
  //             statusData
  //         }

  //     } else {
  //         console.log('Error in status');
  //     }
  // }
}
